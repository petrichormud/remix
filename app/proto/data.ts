// @generated by protobuf-ts 2.9.4 with parameter client_grpc1
// @generated from protobuf file "data.proto" (package "data", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message data.CreatePatchRequest
 */
export interface CreatePatchRequest {
    /**
     * @generated from protobuf field: string kind = 1;
     */
    kind: string;
    /**
     * @generated from protobuf field: int64 major = 2;
     */
    major: bigint;
    /**
     * @generated from protobuf field: int64 minor = 3;
     */
    minor: bigint;
    /**
     * @generated from protobuf field: int64 patch = 4;
     */
    patch: bigint;
}
/**
 * @generated from protobuf message data.CreatePatchReply
 */
export interface CreatePatchReply {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
}
/**
 * @generated from protobuf message data.DeletePatchRequest
 */
export interface DeletePatchRequest {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
}
/**
 * @generated from protobuf message data.DeletePatchReply
 */
export interface DeletePatchReply {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
}
/**
 * @generated from protobuf message data.CreatePatchChangeRequest
 */
export interface CreatePatchChangeRequest {
    /**
     * @generated from protobuf field: int64 pcid = 1;
     */
    pcid: bigint;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string text = 3;
     */
    text: string;
}
/**
 * @generated from protobuf message data.CreatePatchChangeReply
 */
export interface CreatePatchChangeReply {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string text = 3;
     */
    text: string;
}
/**
 * @generated from protobuf message data.DeletePatchChangeRequest
 */
export interface DeletePatchChangeRequest {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
}
/**
 * @generated from protobuf message data.DeletePatchChangeReply
 */
export interface DeletePatchChangeReply {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
}
/**
 * @generated from protobuf message data.MarkPatchReleasedRequest
 */
export interface MarkPatchReleasedRequest {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
}
/**
 * @generated from protobuf message data.MarkPatchReleasedReply
 */
export interface MarkPatchReleasedReply {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
}
/**
 * @generated from protobuf message data.RevokePatchReleasedRequest
 */
export interface RevokePatchReleasedRequest {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
}
/**
 * @generated from protobuf message data.RevokePatchReleasedReply
 */
export interface RevokePatchReleasedReply {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
}
/**
 * @generated from protobuf message data.ReleasedPatchesRequest
 */
export interface ReleasedPatchesRequest {
    /**
     * @generated from protobuf field: string kind = 1;
     */
    kind: string;
}
/**
 * @generated from protobuf message data.ReleasedPatchesReply
 */
export interface ReleasedPatchesReply {
    /**
     * @generated from protobuf field: repeated data.ReleasedPatchesReplyPatch patches = 1;
     */
    patches: ReleasedPatchesReplyPatch[];
}
/**
 * @generated from protobuf message data.ReleasedPatchesReplyPatch
 */
export interface ReleasedPatchesReplyPatch {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: int64 major = 2;
     */
    major: bigint;
    /**
     * @generated from protobuf field: int64 minor = 3;
     */
    minor: bigint;
    /**
     * @generated from protobuf field: int64 patch = 4;
     */
    patch: bigint;
    /**
     * @generated from protobuf field: repeated data.ReleasedPatchesReplyPatchChange changes = 5;
     */
    changes: ReleasedPatchesReplyPatchChange[];
}
/**
 * @generated from protobuf message data.ReleasedPatchesReplyPatchChange
 */
export interface ReleasedPatchesReplyPatchChange {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string text = 3;
     */
    text: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class CreatePatchRequest$Type extends MessageType<CreatePatchRequest> {
    constructor() {
        super("data.CreatePatchRequest", [
            { no: 1, name: "kind", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "major", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "minor", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "patch", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CreatePatchRequest>): CreatePatchRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.kind = "";
        message.major = 0n;
        message.minor = 0n;
        message.patch = 0n;
        if (value !== undefined)
            reflectionMergePartial<CreatePatchRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreatePatchRequest): CreatePatchRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string kind */ 1:
                    message.kind = reader.string();
                    break;
                case /* int64 major */ 2:
                    message.major = reader.int64().toBigInt();
                    break;
                case /* int64 minor */ 3:
                    message.minor = reader.int64().toBigInt();
                    break;
                case /* int64 patch */ 4:
                    message.patch = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreatePatchRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string kind = 1; */
        if (message.kind !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.kind);
        /* int64 major = 2; */
        if (message.major !== 0n)
            writer.tag(2, WireType.Varint).int64(message.major);
        /* int64 minor = 3; */
        if (message.minor !== 0n)
            writer.tag(3, WireType.Varint).int64(message.minor);
        /* int64 patch = 4; */
        if (message.patch !== 0n)
            writer.tag(4, WireType.Varint).int64(message.patch);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.CreatePatchRequest
 */
export const CreatePatchRequest = new CreatePatchRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreatePatchReply$Type extends MessageType<CreatePatchReply> {
    constructor() {
        super("data.CreatePatchReply", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CreatePatchReply>): CreatePatchReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<CreatePatchReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreatePatchReply): CreatePatchReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreatePatchReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.CreatePatchReply
 */
export const CreatePatchReply = new CreatePatchReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeletePatchRequest$Type extends MessageType<DeletePatchRequest> {
    constructor() {
        super("data.DeletePatchRequest", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<DeletePatchRequest>): DeletePatchRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<DeletePatchRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeletePatchRequest): DeletePatchRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeletePatchRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.DeletePatchRequest
 */
export const DeletePatchRequest = new DeletePatchRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeletePatchReply$Type extends MessageType<DeletePatchReply> {
    constructor() {
        super("data.DeletePatchReply", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<DeletePatchReply>): DeletePatchReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<DeletePatchReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeletePatchReply): DeletePatchReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeletePatchReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.DeletePatchReply
 */
export const DeletePatchReply = new DeletePatchReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreatePatchChangeRequest$Type extends MessageType<CreatePatchChangeRequest> {
    constructor() {
        super("data.CreatePatchChangeRequest", [
            { no: 1, name: "pcid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreatePatchChangeRequest>): CreatePatchChangeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pcid = 0n;
        message.title = "";
        message.text = "";
        if (value !== undefined)
            reflectionMergePartial<CreatePatchChangeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreatePatchChangeRequest): CreatePatchChangeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 pcid */ 1:
                    message.pcid = reader.int64().toBigInt();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string text */ 3:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreatePatchChangeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 pcid = 1; */
        if (message.pcid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.pcid);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string text = 3; */
        if (message.text !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.CreatePatchChangeRequest
 */
export const CreatePatchChangeRequest = new CreatePatchChangeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreatePatchChangeReply$Type extends MessageType<CreatePatchChangeReply> {
    constructor() {
        super("data.CreatePatchChangeReply", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreatePatchChangeReply>): CreatePatchChangeReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.title = "";
        message.text = "";
        if (value !== undefined)
            reflectionMergePartial<CreatePatchChangeReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreatePatchChangeReply): CreatePatchChangeReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string text */ 3:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreatePatchChangeReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string text = 3; */
        if (message.text !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.CreatePatchChangeReply
 */
export const CreatePatchChangeReply = new CreatePatchChangeReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeletePatchChangeRequest$Type extends MessageType<DeletePatchChangeRequest> {
    constructor() {
        super("data.DeletePatchChangeRequest", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<DeletePatchChangeRequest>): DeletePatchChangeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<DeletePatchChangeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeletePatchChangeRequest): DeletePatchChangeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeletePatchChangeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.DeletePatchChangeRequest
 */
export const DeletePatchChangeRequest = new DeletePatchChangeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeletePatchChangeReply$Type extends MessageType<DeletePatchChangeReply> {
    constructor() {
        super("data.DeletePatchChangeReply", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<DeletePatchChangeReply>): DeletePatchChangeReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<DeletePatchChangeReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeletePatchChangeReply): DeletePatchChangeReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeletePatchChangeReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.DeletePatchChangeReply
 */
export const DeletePatchChangeReply = new DeletePatchChangeReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MarkPatchReleasedRequest$Type extends MessageType<MarkPatchReleasedRequest> {
    constructor() {
        super("data.MarkPatchReleasedRequest", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MarkPatchReleasedRequest>): MarkPatchReleasedRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<MarkPatchReleasedRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarkPatchReleasedRequest): MarkPatchReleasedRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MarkPatchReleasedRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MarkPatchReleasedRequest
 */
export const MarkPatchReleasedRequest = new MarkPatchReleasedRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MarkPatchReleasedReply$Type extends MessageType<MarkPatchReleasedReply> {
    constructor() {
        super("data.MarkPatchReleasedReply", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MarkPatchReleasedReply>): MarkPatchReleasedReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<MarkPatchReleasedReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarkPatchReleasedReply): MarkPatchReleasedReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MarkPatchReleasedReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.MarkPatchReleasedReply
 */
export const MarkPatchReleasedReply = new MarkPatchReleasedReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevokePatchReleasedRequest$Type extends MessageType<RevokePatchReleasedRequest> {
    constructor() {
        super("data.RevokePatchReleasedRequest", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<RevokePatchReleasedRequest>): RevokePatchReleasedRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<RevokePatchReleasedRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevokePatchReleasedRequest): RevokePatchReleasedRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RevokePatchReleasedRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RevokePatchReleasedRequest
 */
export const RevokePatchReleasedRequest = new RevokePatchReleasedRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevokePatchReleasedReply$Type extends MessageType<RevokePatchReleasedReply> {
    constructor() {
        super("data.RevokePatchReleasedReply", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<RevokePatchReleasedReply>): RevokePatchReleasedReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<RevokePatchReleasedReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevokePatchReleasedReply): RevokePatchReleasedReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RevokePatchReleasedReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.RevokePatchReleasedReply
 */
export const RevokePatchReleasedReply = new RevokePatchReleasedReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReleasedPatchesRequest$Type extends MessageType<ReleasedPatchesRequest> {
    constructor() {
        super("data.ReleasedPatchesRequest", [
            { no: 1, name: "kind", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ReleasedPatchesRequest>): ReleasedPatchesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.kind = "";
        if (value !== undefined)
            reflectionMergePartial<ReleasedPatchesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReleasedPatchesRequest): ReleasedPatchesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string kind */ 1:
                    message.kind = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReleasedPatchesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string kind = 1; */
        if (message.kind !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.kind);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ReleasedPatchesRequest
 */
export const ReleasedPatchesRequest = new ReleasedPatchesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReleasedPatchesReply$Type extends MessageType<ReleasedPatchesReply> {
    constructor() {
        super("data.ReleasedPatchesReply", [
            { no: 1, name: "patches", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ReleasedPatchesReplyPatch }
        ]);
    }
    create(value?: PartialMessage<ReleasedPatchesReply>): ReleasedPatchesReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.patches = [];
        if (value !== undefined)
            reflectionMergePartial<ReleasedPatchesReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReleasedPatchesReply): ReleasedPatchesReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated data.ReleasedPatchesReplyPatch patches */ 1:
                    message.patches.push(ReleasedPatchesReplyPatch.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReleasedPatchesReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated data.ReleasedPatchesReplyPatch patches = 1; */
        for (let i = 0; i < message.patches.length; i++)
            ReleasedPatchesReplyPatch.internalBinaryWrite(message.patches[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ReleasedPatchesReply
 */
export const ReleasedPatchesReply = new ReleasedPatchesReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReleasedPatchesReplyPatch$Type extends MessageType<ReleasedPatchesReplyPatch> {
    constructor() {
        super("data.ReleasedPatchesReplyPatch", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "major", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "minor", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "patch", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "changes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ReleasedPatchesReplyPatchChange }
        ]);
    }
    create(value?: PartialMessage<ReleasedPatchesReplyPatch>): ReleasedPatchesReplyPatch {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.major = 0n;
        message.minor = 0n;
        message.patch = 0n;
        message.changes = [];
        if (value !== undefined)
            reflectionMergePartial<ReleasedPatchesReplyPatch>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReleasedPatchesReplyPatch): ReleasedPatchesReplyPatch {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int64 major */ 2:
                    message.major = reader.int64().toBigInt();
                    break;
                case /* int64 minor */ 3:
                    message.minor = reader.int64().toBigInt();
                    break;
                case /* int64 patch */ 4:
                    message.patch = reader.int64().toBigInt();
                    break;
                case /* repeated data.ReleasedPatchesReplyPatchChange changes */ 5:
                    message.changes.push(ReleasedPatchesReplyPatchChange.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReleasedPatchesReplyPatch, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 major = 2; */
        if (message.major !== 0n)
            writer.tag(2, WireType.Varint).int64(message.major);
        /* int64 minor = 3; */
        if (message.minor !== 0n)
            writer.tag(3, WireType.Varint).int64(message.minor);
        /* int64 patch = 4; */
        if (message.patch !== 0n)
            writer.tag(4, WireType.Varint).int64(message.patch);
        /* repeated data.ReleasedPatchesReplyPatchChange changes = 5; */
        for (let i = 0; i < message.changes.length; i++)
            ReleasedPatchesReplyPatchChange.internalBinaryWrite(message.changes[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ReleasedPatchesReplyPatch
 */
export const ReleasedPatchesReplyPatch = new ReleasedPatchesReplyPatch$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReleasedPatchesReplyPatchChange$Type extends MessageType<ReleasedPatchesReplyPatchChange> {
    constructor() {
        super("data.ReleasedPatchesReplyPatchChange", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ReleasedPatchesReplyPatchChange>): ReleasedPatchesReplyPatchChange {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.title = "";
        message.text = "";
        if (value !== undefined)
            reflectionMergePartial<ReleasedPatchesReplyPatchChange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReleasedPatchesReplyPatchChange): ReleasedPatchesReplyPatchChange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string text */ 3:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReleasedPatchesReplyPatchChange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string text = 3; */
        if (message.text !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data.ReleasedPatchesReplyPatchChange
 */
export const ReleasedPatchesReplyPatchChange = new ReleasedPatchesReplyPatchChange$Type();
/**
 * @generated ServiceType for protobuf service data.Data
 */
export const Data = new ServiceType("data.Data", [
    { name: "CreatePatch", options: {}, I: CreatePatchRequest, O: CreatePatchReply },
    { name: "DeletePatch", options: {}, I: DeletePatchRequest, O: DeletePatchReply },
    { name: "CreatePatchChange", options: {}, I: CreatePatchChangeRequest, O: CreatePatchChangeReply },
    { name: "DeletePatchChange", options: {}, I: DeletePatchChangeRequest, O: DeletePatchChangeReply },
    { name: "MarkPatchReleased", options: {}, I: MarkPatchReleasedRequest, O: MarkPatchReleasedReply },
    { name: "RevokePatchReleased", options: {}, I: RevokePatchReleasedRequest, O: RevokePatchReleasedReply },
    { name: "ReleasedPatches", options: {}, I: ReleasedPatchesRequest, O: ReleasedPatchesReply }
]);
