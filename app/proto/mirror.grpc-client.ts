// @generated by protobuf-ts 2.9.4 with parameter client_grpc1
// @generated from protobuf file "mirror.proto" (package "mirror", syntax proto3)
// tslint:disable
import { Mirror } from "./mirror";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { LoginReply } from "./mirror";
import type { LoginRequest } from "./mirror";
import type { RegisterReply } from "./mirror";
import type { RegisterRequest } from "./mirror";
import * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service mirror.Mirror
 */
export interface IMirrorClient {
    /**
     * @generated from protobuf rpc: Register(mirror.RegisterRequest) returns (mirror.RegisterReply);
     */
    register(input: RegisterRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: RegisterReply) => void): grpc.ClientUnaryCall;
    register(input: RegisterRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: RegisterReply) => void): grpc.ClientUnaryCall;
    register(input: RegisterRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: RegisterReply) => void): grpc.ClientUnaryCall;
    register(input: RegisterRequest, callback: (err: grpc.ServiceError | null, value?: RegisterReply) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: Login(mirror.LoginRequest) returns (mirror.LoginReply);
     */
    login(input: LoginRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: LoginReply) => void): grpc.ClientUnaryCall;
    login(input: LoginRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: LoginReply) => void): grpc.ClientUnaryCall;
    login(input: LoginRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: LoginReply) => void): grpc.ClientUnaryCall;
    login(input: LoginRequest, callback: (err: grpc.ServiceError | null, value?: LoginReply) => void): grpc.ClientUnaryCall;
}
/**
 * @generated from protobuf service mirror.Mirror
 */
export class MirrorClient extends grpc.Client implements IMirrorClient {
    private readonly _binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions>;
    constructor(address: string, credentials: grpc.ChannelCredentials, options: grpc.ClientOptions = {}, binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions> = {}) {
        super(address, credentials, options);
        this._binaryOptions = binaryOptions;
    }
    /**
     * @generated from protobuf rpc: Register(mirror.RegisterRequest) returns (mirror.RegisterReply);
     */
    register(input: RegisterRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: RegisterReply) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: RegisterReply) => void), callback?: ((err: grpc.ServiceError | null, value?: RegisterReply) => void)): grpc.ClientUnaryCall {
        const method = Mirror.methods[0];
        return this.makeUnaryRequest<RegisterRequest, RegisterReply>(`/${Mirror.typeName}/${method.name}`, (value: RegisterRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): RegisterReply => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: Login(mirror.LoginRequest) returns (mirror.LoginReply);
     */
    login(input: LoginRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: LoginReply) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: LoginReply) => void), callback?: ((err: grpc.ServiceError | null, value?: LoginReply) => void)): grpc.ClientUnaryCall {
        const method = Mirror.methods[1];
        return this.makeUnaryRequest<LoginRequest, LoginReply>(`/${Mirror.typeName}/${method.name}`, (value: LoginRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): LoginReply => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
}
