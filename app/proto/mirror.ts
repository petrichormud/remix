// @generated by protobuf-ts 2.9.4 with parameter client_grpc1
// @generated from protobuf file "mirror.proto" (package "mirror", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message mirror.RegisterRequest
 */
export interface RegisterRequest {
    /**
     * @generated from protobuf field: string username = 1;
     */
    username: string;
    /**
     * @generated from protobuf field: string passphrase = 2;
     */
    passphrase: string;
}
/**
 * @generated from protobuf message mirror.RegisterReply
 */
export interface RegisterReply {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
}
/**
 * @generated from protobuf message mirror.LoginRequest
 */
export interface LoginRequest {
    /**
     * @generated from protobuf field: string username = 1;
     */
    username: string;
    /**
     * @generated from protobuf field: string passphrase = 2;
     */
    passphrase: string;
}
/**
 * @generated from protobuf message mirror.LoginReply
 */
export interface LoginReply {
    /**
     * @generated from protobuf field: bool verified = 1;
     */
    verified: boolean;
    /**
     * @generated from protobuf field: int64 id = 2;
     */
    id: bigint;
}
/**
 * @generated from protobuf message mirror.PlayerUsernameRequest
 */
export interface PlayerUsernameRequest {
    /**
     * @generated from protobuf field: int64 pid = 1;
     */
    pid: bigint;
}
/**
 * @generated from protobuf message mirror.PlayerUsernameReply
 */
export interface PlayerUsernameReply {
    /**
     * @generated from protobuf field: string username = 1;
     */
    username: string;
}
/**
 * @generated from protobuf message mirror.PlayerSettingsRequest
 */
export interface PlayerSettingsRequest {
    /**
     * @generated from protobuf field: int64 pid = 1;
     */
    pid: bigint;
}
/**
 * @generated from protobuf message mirror.PlayerSettingsReply
 */
export interface PlayerSettingsReply {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: int64 pid = 2;
     */
    pid: bigint;
    /**
     * @generated from protobuf field: string theme = 3;
     */
    theme: string;
}
/**
 * @generated from protobuf message mirror.SetPlayerSettingsThemeRequest
 */
export interface SetPlayerSettingsThemeRequest {
    /**
     * @generated from protobuf field: int64 pid = 1;
     */
    pid: bigint;
    /**
     * @generated from protobuf field: string theme = 2;
     */
    theme: string;
}
/**
 * @generated from protobuf message mirror.SetPlayerSettingsThemeReply
 */
export interface SetPlayerSettingsThemeReply {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: int64 pid = 2;
     */
    pid: bigint;
    /**
     * @generated from protobuf field: string theme = 3;
     */
    theme: string;
}
/**
 * @generated from protobuf message mirror.PlayersRequest
 */
export interface PlayersRequest {
}
/**
 * @generated from protobuf message mirror.PlayersReply
 */
export interface PlayersReply {
    /**
     * @generated from protobuf field: repeated mirror.PlayersReplyPlayer players = 1;
     */
    players: PlayersReplyPlayer[];
}
/**
 * @generated from protobuf message mirror.PlayersReplyPlayer
 */
export interface PlayersReplyPlayer {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string username = 2;
     */
    username: string;
    /**
     * @generated from protobuf field: string primary_email = 3;
     */
    primaryEmail: string;
}
/**
 * @generated from protobuf message mirror.PlayerPermissionDefinitionsRequest
 */
export interface PlayerPermissionDefinitionsRequest {
}
/**
 * @generated from protobuf message mirror.PlayerPermissionDefinitionsReply
 */
export interface PlayerPermissionDefinitionsReply {
    /**
     * @generated from protobuf field: repeated mirror.PlayerPermissionDefinitionsReplyPermission permissions = 1;
     */
    permissions: PlayerPermissionDefinitionsReplyPermission[];
}
/**
 * @generated from protobuf message mirror.PlayerPermissionDefinitionsReplyPermission
 */
export interface PlayerPermissionDefinitionsReplyPermission {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string about = 3;
     */
    about: string;
    /**
     * @generated from protobuf field: string category = 4;
     */
    category: string;
}
/**
 * @generated from protobuf message mirror.PlayerPermissionsRequest
 */
export interface PlayerPermissionsRequest {
    /**
     * @generated from protobuf field: int64 pid = 1;
     */
    pid: bigint;
}
/**
 * @generated from protobuf message mirror.PlayerPermissionsReply
 */
export interface PlayerPermissionsReply {
    /**
     * @generated from protobuf field: int64 pid = 1;
     */
    pid: bigint;
    /**
     * @generated from protobuf field: repeated string names = 2;
     */
    names: string[];
}
/**
 * @generated from protobuf message mirror.GrantPlayerPermissionRequest
 */
export interface GrantPlayerPermissionRequest {
    /**
     * @generated from protobuf field: int64 pid = 1;
     */
    pid: bigint;
    /**
     * @generated from protobuf field: int64 ipid = 2;
     */
    ipid: bigint;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
}
/**
 * @generated from protobuf message mirror.GrantPlayerPermissionReply
 */
export interface GrantPlayerPermissionReply {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
}
/**
 * @generated from protobuf message mirror.RevokePlayerPermissionRequest
 */
export interface RevokePlayerPermissionRequest {
    /**
     * @generated from protobuf field: int64 pid = 1;
     */
    pid: bigint;
    /**
     * @generated from protobuf field: int64 ipid = 2;
     */
    ipid: bigint;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
}
/**
 * @generated from protobuf message mirror.RevokePlayerPermissionReply
 */
export interface RevokePlayerPermissionReply {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
}
/**
 * @generated from protobuf message mirror.Email
 */
export interface Email {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: int64 pid = 2;
     */
    pid: bigint;
    /**
     * @generated from protobuf field: string address = 3;
     */
    address: string;
    /**
     * @generated from protobuf field: bool verified = 4;
     */
    verified: boolean;
}
/**
 * @generated from protobuf message mirror.ListEmailsForPlayerRequest
 */
export interface ListEmailsForPlayerRequest {
    /**
     * @generated from protobuf field: int64 pid = 1;
     */
    pid: bigint;
}
/**
 * @generated from protobuf message mirror.ListEmailsForPlayerReply
 */
export interface ListEmailsForPlayerReply {
    /**
     * @generated from protobuf field: repeated mirror.Email emails = 1;
     */
    emails: Email[];
}
/**
 * @generated from protobuf message mirror.CreateEmailRequest
 */
export interface CreateEmailRequest {
    /**
     * @generated from protobuf field: int64 pid = 1;
     */
    pid: bigint;
    /**
     * @generated from protobuf field: string address = 2;
     */
    address: string;
}
/**
 * @generated from protobuf message mirror.CreateEmailReply
 */
export interface CreateEmailReply {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
}
/**
 * @generated from protobuf message mirror.EditEmailRequest
 */
export interface EditEmailRequest {
    /**
     * @generated from protobuf field: int64 pid = 1;
     */
    pid: bigint;
    /**
     * @generated from protobuf field: int64 id = 2;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string address = 3;
     */
    address: string;
}
/**
 * @generated from protobuf message mirror.EditEmailReply
 */
export interface EditEmailReply {
}
/**
 * @generated from protobuf message mirror.DeleteEmailRequest
 */
export interface DeleteEmailRequest {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: int64 pid = 2;
     */
    pid: bigint;
}
/**
 * @generated from protobuf message mirror.DeleteEmailReply
 */
export interface DeleteEmailReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class RegisterRequest$Type extends MessageType<RegisterRequest> {
    constructor() {
        super("mirror.RegisterRequest", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "passphrase", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RegisterRequest>): RegisterRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.username = "";
        message.passphrase = "";
        if (value !== undefined)
            reflectionMergePartial<RegisterRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterRequest): RegisterRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                case /* string passphrase */ 2:
                    message.passphrase = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        /* string passphrase = 2; */
        if (message.passphrase !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.passphrase);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mirror.RegisterRequest
 */
export const RegisterRequest = new RegisterRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterReply$Type extends MessageType<RegisterReply> {
    constructor() {
        super("mirror.RegisterReply", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<RegisterReply>): RegisterReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<RegisterReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterReply): RegisterReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mirror.RegisterReply
 */
export const RegisterReply = new RegisterReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginRequest$Type extends MessageType<LoginRequest> {
    constructor() {
        super("mirror.LoginRequest", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "passphrase", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoginRequest>): LoginRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.username = "";
        message.passphrase = "";
        if (value !== undefined)
            reflectionMergePartial<LoginRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginRequest): LoginRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                case /* string passphrase */ 2:
                    message.passphrase = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        /* string passphrase = 2; */
        if (message.passphrase !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.passphrase);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mirror.LoginRequest
 */
export const LoginRequest = new LoginRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginReply$Type extends MessageType<LoginReply> {
    constructor() {
        super("mirror.LoginReply", [
            { no: 1, name: "verified", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LoginReply>): LoginReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.verified = false;
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<LoginReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginReply): LoginReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool verified */ 1:
                    message.verified = reader.bool();
                    break;
                case /* int64 id */ 2:
                    message.id = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool verified = 1; */
        if (message.verified !== false)
            writer.tag(1, WireType.Varint).bool(message.verified);
        /* int64 id = 2; */
        if (message.id !== 0n)
            writer.tag(2, WireType.Varint).int64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mirror.LoginReply
 */
export const LoginReply = new LoginReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerUsernameRequest$Type extends MessageType<PlayerUsernameRequest> {
    constructor() {
        super("mirror.PlayerUsernameRequest", [
            { no: 1, name: "pid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerUsernameRequest>): PlayerUsernameRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pid = 0n;
        if (value !== undefined)
            reflectionMergePartial<PlayerUsernameRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerUsernameRequest): PlayerUsernameRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 pid */ 1:
                    message.pid = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerUsernameRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 pid = 1; */
        if (message.pid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.pid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mirror.PlayerUsernameRequest
 */
export const PlayerUsernameRequest = new PlayerUsernameRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerUsernameReply$Type extends MessageType<PlayerUsernameReply> {
    constructor() {
        super("mirror.PlayerUsernameReply", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerUsernameReply>): PlayerUsernameReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.username = "";
        if (value !== undefined)
            reflectionMergePartial<PlayerUsernameReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerUsernameReply): PlayerUsernameReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerUsernameReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mirror.PlayerUsernameReply
 */
export const PlayerUsernameReply = new PlayerUsernameReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerSettingsRequest$Type extends MessageType<PlayerSettingsRequest> {
    constructor() {
        super("mirror.PlayerSettingsRequest", [
            { no: 1, name: "pid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerSettingsRequest>): PlayerSettingsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pid = 0n;
        if (value !== undefined)
            reflectionMergePartial<PlayerSettingsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerSettingsRequest): PlayerSettingsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 pid */ 1:
                    message.pid = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerSettingsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 pid = 1; */
        if (message.pid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.pid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mirror.PlayerSettingsRequest
 */
export const PlayerSettingsRequest = new PlayerSettingsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerSettingsReply$Type extends MessageType<PlayerSettingsReply> {
    constructor() {
        super("mirror.PlayerSettingsReply", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "pid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "theme", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerSettingsReply>): PlayerSettingsReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.pid = 0n;
        message.theme = "";
        if (value !== undefined)
            reflectionMergePartial<PlayerSettingsReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerSettingsReply): PlayerSettingsReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int64 pid */ 2:
                    message.pid = reader.int64().toBigInt();
                    break;
                case /* string theme */ 3:
                    message.theme = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerSettingsReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 pid = 2; */
        if (message.pid !== 0n)
            writer.tag(2, WireType.Varint).int64(message.pid);
        /* string theme = 3; */
        if (message.theme !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.theme);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mirror.PlayerSettingsReply
 */
export const PlayerSettingsReply = new PlayerSettingsReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetPlayerSettingsThemeRequest$Type extends MessageType<SetPlayerSettingsThemeRequest> {
    constructor() {
        super("mirror.SetPlayerSettingsThemeRequest", [
            { no: 1, name: "pid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "theme", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetPlayerSettingsThemeRequest>): SetPlayerSettingsThemeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pid = 0n;
        message.theme = "";
        if (value !== undefined)
            reflectionMergePartial<SetPlayerSettingsThemeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetPlayerSettingsThemeRequest): SetPlayerSettingsThemeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 pid */ 1:
                    message.pid = reader.int64().toBigInt();
                    break;
                case /* string theme */ 2:
                    message.theme = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetPlayerSettingsThemeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 pid = 1; */
        if (message.pid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.pid);
        /* string theme = 2; */
        if (message.theme !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.theme);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mirror.SetPlayerSettingsThemeRequest
 */
export const SetPlayerSettingsThemeRequest = new SetPlayerSettingsThemeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetPlayerSettingsThemeReply$Type extends MessageType<SetPlayerSettingsThemeReply> {
    constructor() {
        super("mirror.SetPlayerSettingsThemeReply", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "pid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "theme", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetPlayerSettingsThemeReply>): SetPlayerSettingsThemeReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.pid = 0n;
        message.theme = "";
        if (value !== undefined)
            reflectionMergePartial<SetPlayerSettingsThemeReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetPlayerSettingsThemeReply): SetPlayerSettingsThemeReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int64 pid */ 2:
                    message.pid = reader.int64().toBigInt();
                    break;
                case /* string theme */ 3:
                    message.theme = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetPlayerSettingsThemeReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 pid = 2; */
        if (message.pid !== 0n)
            writer.tag(2, WireType.Varint).int64(message.pid);
        /* string theme = 3; */
        if (message.theme !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.theme);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mirror.SetPlayerSettingsThemeReply
 */
export const SetPlayerSettingsThemeReply = new SetPlayerSettingsThemeReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayersRequest$Type extends MessageType<PlayersRequest> {
    constructor() {
        super("mirror.PlayersRequest", []);
    }
    create(value?: PartialMessage<PlayersRequest>): PlayersRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PlayersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayersRequest): PlayersRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PlayersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mirror.PlayersRequest
 */
export const PlayersRequest = new PlayersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayersReply$Type extends MessageType<PlayersReply> {
    constructor() {
        super("mirror.PlayersReply", [
            { no: 1, name: "players", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayersReplyPlayer }
        ]);
    }
    create(value?: PartialMessage<PlayersReply>): PlayersReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.players = [];
        if (value !== undefined)
            reflectionMergePartial<PlayersReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayersReply): PlayersReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated mirror.PlayersReplyPlayer players */ 1:
                    message.players.push(PlayersReplyPlayer.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayersReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated mirror.PlayersReplyPlayer players = 1; */
        for (let i = 0; i < message.players.length; i++)
            PlayersReplyPlayer.internalBinaryWrite(message.players[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mirror.PlayersReply
 */
export const PlayersReply = new PlayersReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayersReplyPlayer$Type extends MessageType<PlayersReplyPlayer> {
    constructor() {
        super("mirror.PlayersReplyPlayer", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "primary_email", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlayersReplyPlayer>): PlayersReplyPlayer {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.username = "";
        message.primaryEmail = "";
        if (value !== undefined)
            reflectionMergePartial<PlayersReplyPlayer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayersReplyPlayer): PlayersReplyPlayer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string username */ 2:
                    message.username = reader.string();
                    break;
                case /* string primary_email */ 3:
                    message.primaryEmail = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayersReplyPlayer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string username = 2; */
        if (message.username !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.username);
        /* string primary_email = 3; */
        if (message.primaryEmail !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.primaryEmail);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mirror.PlayersReplyPlayer
 */
export const PlayersReplyPlayer = new PlayersReplyPlayer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerPermissionDefinitionsRequest$Type extends MessageType<PlayerPermissionDefinitionsRequest> {
    constructor() {
        super("mirror.PlayerPermissionDefinitionsRequest", []);
    }
    create(value?: PartialMessage<PlayerPermissionDefinitionsRequest>): PlayerPermissionDefinitionsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PlayerPermissionDefinitionsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerPermissionDefinitionsRequest): PlayerPermissionDefinitionsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PlayerPermissionDefinitionsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mirror.PlayerPermissionDefinitionsRequest
 */
export const PlayerPermissionDefinitionsRequest = new PlayerPermissionDefinitionsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerPermissionDefinitionsReply$Type extends MessageType<PlayerPermissionDefinitionsReply> {
    constructor() {
        super("mirror.PlayerPermissionDefinitionsReply", [
            { no: 1, name: "permissions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayerPermissionDefinitionsReplyPermission }
        ]);
    }
    create(value?: PartialMessage<PlayerPermissionDefinitionsReply>): PlayerPermissionDefinitionsReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.permissions = [];
        if (value !== undefined)
            reflectionMergePartial<PlayerPermissionDefinitionsReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerPermissionDefinitionsReply): PlayerPermissionDefinitionsReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated mirror.PlayerPermissionDefinitionsReplyPermission permissions */ 1:
                    message.permissions.push(PlayerPermissionDefinitionsReplyPermission.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerPermissionDefinitionsReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated mirror.PlayerPermissionDefinitionsReplyPermission permissions = 1; */
        for (let i = 0; i < message.permissions.length; i++)
            PlayerPermissionDefinitionsReplyPermission.internalBinaryWrite(message.permissions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mirror.PlayerPermissionDefinitionsReply
 */
export const PlayerPermissionDefinitionsReply = new PlayerPermissionDefinitionsReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerPermissionDefinitionsReplyPermission$Type extends MessageType<PlayerPermissionDefinitionsReplyPermission> {
    constructor() {
        super("mirror.PlayerPermissionDefinitionsReplyPermission", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "about", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "category", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerPermissionDefinitionsReplyPermission>): PlayerPermissionDefinitionsReplyPermission {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.title = "";
        message.about = "";
        message.category = "";
        if (value !== undefined)
            reflectionMergePartial<PlayerPermissionDefinitionsReplyPermission>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerPermissionDefinitionsReplyPermission): PlayerPermissionDefinitionsReplyPermission {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string about */ 3:
                    message.about = reader.string();
                    break;
                case /* string category */ 4:
                    message.category = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerPermissionDefinitionsReplyPermission, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string about = 3; */
        if (message.about !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.about);
        /* string category = 4; */
        if (message.category !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.category);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mirror.PlayerPermissionDefinitionsReplyPermission
 */
export const PlayerPermissionDefinitionsReplyPermission = new PlayerPermissionDefinitionsReplyPermission$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerPermissionsRequest$Type extends MessageType<PlayerPermissionsRequest> {
    constructor() {
        super("mirror.PlayerPermissionsRequest", [
            { no: 1, name: "pid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerPermissionsRequest>): PlayerPermissionsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pid = 0n;
        if (value !== undefined)
            reflectionMergePartial<PlayerPermissionsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerPermissionsRequest): PlayerPermissionsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 pid */ 1:
                    message.pid = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerPermissionsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 pid = 1; */
        if (message.pid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.pid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mirror.PlayerPermissionsRequest
 */
export const PlayerPermissionsRequest = new PlayerPermissionsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerPermissionsReply$Type extends MessageType<PlayerPermissionsReply> {
    constructor() {
        super("mirror.PlayerPermissionsReply", [
            { no: 1, name: "pid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "names", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerPermissionsReply>): PlayerPermissionsReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pid = 0n;
        message.names = [];
        if (value !== undefined)
            reflectionMergePartial<PlayerPermissionsReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerPermissionsReply): PlayerPermissionsReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 pid */ 1:
                    message.pid = reader.int64().toBigInt();
                    break;
                case /* repeated string names */ 2:
                    message.names.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerPermissionsReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 pid = 1; */
        if (message.pid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.pid);
        /* repeated string names = 2; */
        for (let i = 0; i < message.names.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.names[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mirror.PlayerPermissionsReply
 */
export const PlayerPermissionsReply = new PlayerPermissionsReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GrantPlayerPermissionRequest$Type extends MessageType<GrantPlayerPermissionRequest> {
    constructor() {
        super("mirror.GrantPlayerPermissionRequest", [
            { no: 1, name: "pid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "ipid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GrantPlayerPermissionRequest>): GrantPlayerPermissionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pid = 0n;
        message.ipid = 0n;
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<GrantPlayerPermissionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrantPlayerPermissionRequest): GrantPlayerPermissionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 pid */ 1:
                    message.pid = reader.int64().toBigInt();
                    break;
                case /* int64 ipid */ 2:
                    message.ipid = reader.int64().toBigInt();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrantPlayerPermissionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 pid = 1; */
        if (message.pid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.pid);
        /* int64 ipid = 2; */
        if (message.ipid !== 0n)
            writer.tag(2, WireType.Varint).int64(message.ipid);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mirror.GrantPlayerPermissionRequest
 */
export const GrantPlayerPermissionRequest = new GrantPlayerPermissionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GrantPlayerPermissionReply$Type extends MessageType<GrantPlayerPermissionReply> {
    constructor() {
        super("mirror.GrantPlayerPermissionReply", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GrantPlayerPermissionReply>): GrantPlayerPermissionReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<GrantPlayerPermissionReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrantPlayerPermissionReply): GrantPlayerPermissionReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrantPlayerPermissionReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mirror.GrantPlayerPermissionReply
 */
export const GrantPlayerPermissionReply = new GrantPlayerPermissionReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevokePlayerPermissionRequest$Type extends MessageType<RevokePlayerPermissionRequest> {
    constructor() {
        super("mirror.RevokePlayerPermissionRequest", [
            { no: 1, name: "pid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "ipid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RevokePlayerPermissionRequest>): RevokePlayerPermissionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pid = 0n;
        message.ipid = 0n;
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<RevokePlayerPermissionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevokePlayerPermissionRequest): RevokePlayerPermissionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 pid */ 1:
                    message.pid = reader.int64().toBigInt();
                    break;
                case /* int64 ipid */ 2:
                    message.ipid = reader.int64().toBigInt();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RevokePlayerPermissionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 pid = 1; */
        if (message.pid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.pid);
        /* int64 ipid = 2; */
        if (message.ipid !== 0n)
            writer.tag(2, WireType.Varint).int64(message.ipid);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mirror.RevokePlayerPermissionRequest
 */
export const RevokePlayerPermissionRequest = new RevokePlayerPermissionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevokePlayerPermissionReply$Type extends MessageType<RevokePlayerPermissionReply> {
    constructor() {
        super("mirror.RevokePlayerPermissionReply", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<RevokePlayerPermissionReply>): RevokePlayerPermissionReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<RevokePlayerPermissionReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevokePlayerPermissionReply): RevokePlayerPermissionReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RevokePlayerPermissionReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mirror.RevokePlayerPermissionReply
 */
export const RevokePlayerPermissionReply = new RevokePlayerPermissionReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Email$Type extends MessageType<Email> {
    constructor() {
        super("mirror.Email", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "pid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "verified", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Email>): Email {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.pid = 0n;
        message.address = "";
        message.verified = false;
        if (value !== undefined)
            reflectionMergePartial<Email>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Email): Email {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int64 pid */ 2:
                    message.pid = reader.int64().toBigInt();
                    break;
                case /* string address */ 3:
                    message.address = reader.string();
                    break;
                case /* bool verified */ 4:
                    message.verified = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Email, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 pid = 2; */
        if (message.pid !== 0n)
            writer.tag(2, WireType.Varint).int64(message.pid);
        /* string address = 3; */
        if (message.address !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.address);
        /* bool verified = 4; */
        if (message.verified !== false)
            writer.tag(4, WireType.Varint).bool(message.verified);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mirror.Email
 */
export const Email = new Email$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListEmailsForPlayerRequest$Type extends MessageType<ListEmailsForPlayerRequest> {
    constructor() {
        super("mirror.ListEmailsForPlayerRequest", [
            { no: 1, name: "pid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ListEmailsForPlayerRequest>): ListEmailsForPlayerRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pid = 0n;
        if (value !== undefined)
            reflectionMergePartial<ListEmailsForPlayerRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListEmailsForPlayerRequest): ListEmailsForPlayerRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 pid */ 1:
                    message.pid = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListEmailsForPlayerRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 pid = 1; */
        if (message.pid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.pid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mirror.ListEmailsForPlayerRequest
 */
export const ListEmailsForPlayerRequest = new ListEmailsForPlayerRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListEmailsForPlayerReply$Type extends MessageType<ListEmailsForPlayerReply> {
    constructor() {
        super("mirror.ListEmailsForPlayerReply", [
            { no: 1, name: "emails", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Email }
        ]);
    }
    create(value?: PartialMessage<ListEmailsForPlayerReply>): ListEmailsForPlayerReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.emails = [];
        if (value !== undefined)
            reflectionMergePartial<ListEmailsForPlayerReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListEmailsForPlayerReply): ListEmailsForPlayerReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated mirror.Email emails */ 1:
                    message.emails.push(Email.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListEmailsForPlayerReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated mirror.Email emails = 1; */
        for (let i = 0; i < message.emails.length; i++)
            Email.internalBinaryWrite(message.emails[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mirror.ListEmailsForPlayerReply
 */
export const ListEmailsForPlayerReply = new ListEmailsForPlayerReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateEmailRequest$Type extends MessageType<CreateEmailRequest> {
    constructor() {
        super("mirror.CreateEmailRequest", [
            { no: 1, name: "pid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateEmailRequest>): CreateEmailRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pid = 0n;
        message.address = "";
        if (value !== undefined)
            reflectionMergePartial<CreateEmailRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateEmailRequest): CreateEmailRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 pid */ 1:
                    message.pid = reader.int64().toBigInt();
                    break;
                case /* string address */ 2:
                    message.address = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateEmailRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 pid = 1; */
        if (message.pid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.pid);
        /* string address = 2; */
        if (message.address !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.address);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mirror.CreateEmailRequest
 */
export const CreateEmailRequest = new CreateEmailRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateEmailReply$Type extends MessageType<CreateEmailReply> {
    constructor() {
        super("mirror.CreateEmailReply", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CreateEmailReply>): CreateEmailReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<CreateEmailReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateEmailReply): CreateEmailReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateEmailReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mirror.CreateEmailReply
 */
export const CreateEmailReply = new CreateEmailReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EditEmailRequest$Type extends MessageType<EditEmailRequest> {
    constructor() {
        super("mirror.EditEmailRequest", [
            { no: 1, name: "pid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EditEmailRequest>): EditEmailRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pid = 0n;
        message.id = 0n;
        message.address = "";
        if (value !== undefined)
            reflectionMergePartial<EditEmailRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EditEmailRequest): EditEmailRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 pid */ 1:
                    message.pid = reader.int64().toBigInt();
                    break;
                case /* int64 id */ 2:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string address */ 3:
                    message.address = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EditEmailRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 pid = 1; */
        if (message.pid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.pid);
        /* int64 id = 2; */
        if (message.id !== 0n)
            writer.tag(2, WireType.Varint).int64(message.id);
        /* string address = 3; */
        if (message.address !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.address);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mirror.EditEmailRequest
 */
export const EditEmailRequest = new EditEmailRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EditEmailReply$Type extends MessageType<EditEmailReply> {
    constructor() {
        super("mirror.EditEmailReply", []);
    }
    create(value?: PartialMessage<EditEmailReply>): EditEmailReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<EditEmailReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EditEmailReply): EditEmailReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: EditEmailReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mirror.EditEmailReply
 */
export const EditEmailReply = new EditEmailReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteEmailRequest$Type extends MessageType<DeleteEmailRequest> {
    constructor() {
        super("mirror.DeleteEmailRequest", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "pid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteEmailRequest>): DeleteEmailRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.pid = 0n;
        if (value !== undefined)
            reflectionMergePartial<DeleteEmailRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteEmailRequest): DeleteEmailRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int64 pid */ 2:
                    message.pid = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteEmailRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 pid = 2; */
        if (message.pid !== 0n)
            writer.tag(2, WireType.Varint).int64(message.pid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mirror.DeleteEmailRequest
 */
export const DeleteEmailRequest = new DeleteEmailRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteEmailReply$Type extends MessageType<DeleteEmailReply> {
    constructor() {
        super("mirror.DeleteEmailReply", []);
    }
    create(value?: PartialMessage<DeleteEmailReply>): DeleteEmailReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteEmailReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteEmailReply): DeleteEmailReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteEmailReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mirror.DeleteEmailReply
 */
export const DeleteEmailReply = new DeleteEmailReply$Type();
/**
 * @generated ServiceType for protobuf service mirror.Mirror
 */
export const Mirror = new ServiceType("mirror.Mirror", [
    { name: "Register", options: {}, I: RegisterRequest, O: RegisterReply },
    { name: "Login", options: {}, I: LoginRequest, O: LoginReply },
    { name: "PlayerUsername", options: {}, I: PlayerUsernameRequest, O: PlayerUsernameReply },
    { name: "PlayerSettings", options: {}, I: PlayerSettingsRequest, O: PlayerSettingsReply },
    { name: "SetPlayerSettingsTheme", options: {}, I: SetPlayerSettingsThemeRequest, O: SetPlayerSettingsThemeReply },
    { name: "Players", options: {}, I: PlayersRequest, O: PlayersReply },
    { name: "PlayerPermissionDefinitions", options: {}, I: PlayerPermissionDefinitionsRequest, O: PlayerPermissionDefinitionsReply },
    { name: "PlayerPermissions", options: {}, I: PlayerPermissionsRequest, O: PlayerPermissionsReply },
    { name: "GrantPlayerPermission", options: {}, I: GrantPlayerPermissionRequest, O: GrantPlayerPermissionReply },
    { name: "RevokePlayerPermission", options: {}, I: RevokePlayerPermissionRequest, O: RevokePlayerPermissionReply },
    { name: "ListEmailsForPlayer", options: {}, I: ListEmailsForPlayerRequest, O: ListEmailsForPlayerReply },
    { name: "CreateEmail", options: {}, I: CreateEmailRequest, O: CreateEmailReply },
    { name: "EditEmail", options: {}, I: EditEmailRequest, O: EditEmailReply },
    { name: "DeleteEmail", options: {}, I: DeleteEmailRequest, O: DeleteEmailReply }
]);
